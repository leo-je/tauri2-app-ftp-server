name: dev
on:
  push:
    branches:
      - dev
  # schedule:
  #   - cron: '0 12 * * *'
  pull_request:
    branches:
      - dev
    paths-ignore:
      - '**.md'
      - 'LICENSE'
  workflow_dispatch:


jobs:
  get_version:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    env:
      TZ: Asia/Shanghai
    outputs:
      version: ${{ steps.get_version.outputs.VERSION }}
      windows_version: ${{ steps.get_version.outputs.WINDOWSVERSION }}
      current_datetime: ${{ steps.get_version.outputs.CURRENT_DATETIME }}
      macos_version: ${{ steps.get_version.outputs.MACOSVERSION }}
      last_commit_msg: ${{ steps.get_version.outputs.LAST_COMMIT_INFO }}
      tagName: ${{ steps.get_version.outputs.TAG }}
      releaseBody: ${{ steps.get_version.outputs.RELEASE_BODY }}
      releaseName: ${{ steps.get_version.outputs.RELEASE_NAME }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: dev

      - name: 创建tab和release信息
        id: get_version
        run: |
          BRANCH_NAME=$(git rev-parse --abbrev-ref HEAD)
          VERSION=$(jq -r '.version' package.json)
          run_number="${{github.run_number}}"
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
          echo "WINDOWSVERSION=$VERSION-$run_number" >> $GITHUB_OUTPUT
          echo "MACOSVERSION=$VERSION-$run_number" >> $GITHUB_OUTPUT
          CURRENT_DATETIME=$(date +"%Y%m%d %H:%M:%S")
          echo "CURRENT_DATETIME=$CURRENT_DATETIME" >> $GITHUB_OUTPUT
          LAST_COMMIT_INFO=$(git log -1 --pretty=format:'%an: %s ')
          echo "$LAST_COMMIT_INFO"
          echo "LAST_COMMIT_INFO=$LAST_COMMIT_INFO" >> $GITHUB_OUTPUT
          TAG="${{github.event_name == 'schedule' && 'schedule-'||''}}$BRANCH_NAME-v$VERSION-$run_number"
          echo "TAG=$TAG" >> $GITHUB_OUTPUT
          echo "Tag:$TAG"
          RELEASEBODY="version v$VERSION by ${{github.event_name}}:$LAST_COMMIT_INFO,build number $run_number,time: $CURRENT_DATETIME"
          echo "RELEASEBODY: $RELEASEBODY"
          RELEASENAME="[$BRANCH_NAME]App version ${{github.event_name}} v$VERSION-$run_number"
          echo "RELEASENAME: $RELEASENAME"
          gh release create "$TAG" --target "$BRANCH_NAME" --title "$RELEASENAME" --notes "$RELEASEBODY"
          echo "RELEASE_NAME=$RELEASENAME" >> $GITHUB_OUTPUT
          echo "RELEASE_BODY=$RELEASEBODY" >> $GITHUB_OUTPUT
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  publish-tauri:
    needs: get_version
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: 'macos-latest' # for Arm based macs (M1 and above).
            target: 'aarch64-apple-darwin'
            args: '--target aarch64-apple-darwin'
          - platform: 'macos-latest' # for Intel based macs.
            target: 'x86_64-apple-darwin'
            args: '--target x86_64-apple-darwin'
          #- platform: 'ubuntu-22.04' # for Tauri v1 you could replace this with ubuntu-20.04.
          #  args: ''
          - platform: 'windows-latest'
            args: ''

    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v4

      - name: setup node
        uses: actions/setup-node@v4
        with:
          node-version: lts/*

      - name: install Rust stable
        uses: dtolnay/rust-toolchain@stable
        with:
          # Those targets are only used on macos runners so it's in an `if` to slightly speed up windows and linux builds.
          targets: ${{ matrix.platform == 'macos-latest' && 'aarch64-apple-darwin,x86_64-apple-darwin' || '' }}

      - name: install dependencies (ubuntu only)
        if: matrix.platform == 'ubuntu-22.04' # This must match the platform value defined above.
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.0-dev libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf
        # webkitgtk 4.0 is for Tauri v1 - webkitgtk 4.1 is for Tauri v2.
        # You can remove the one that doesn't apply to your app to speed up the workflow a bit.

      - name: install frontend dependencies
        run: yarn install # change this to npm, pnpm or bun depending on which one you use.

      - name: Create GitHub Release for macos
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tagName: ${{needs.get_version.outputs.tagName}}
          releaseName: ${{needs.get_version.outputs.releaseName}}
          releaseBody: ${{needs.get_version.outputs.releaseBody}}
          releaseDraft: false
          prerelease: false
          args: ${{ matrix.args }} --config '{"version":"${{matrix.platform == 'windows-latest' && needs.get_version.outputs.windows_version || needs.get_version.outputs.macos_version}}"}'
 
